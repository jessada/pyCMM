import argparse
import sys
from pycmm import settings
from pycmm.app.cmmdb import app_pycmm_cmmdb_create_jobs_setup_file


argp = argparse.ArgumentParser(description=settings.CMMDB_CREATE_JOB_SETUP_FILE_DESCRIPTION)
argp.add_argument('-d',
                  dest='dataset_name',
                  metavar="DATASET_NAME",
                  help='name of this dataset. This will be the name of the merged vcf file',
                  required=True,
                  )
argp.add_argument('-O',
                  dest='project_out_dir',
                  metavar="OUTPUT_DIR",
                  help='a folder to keep all the running results, including log and intermediate files',
                  required=True,
                  )
argp.add_argument('-i',
                  dest='vcf_tabix_file',
                  metavar="INPUT_FILE",
                  help='vcf file in tabix format',
                  required=True,
                  )
argp.add_argument('-r',
                  dest='vcf_region',
                  metavar="VCF_ REGION",
                  help='vcf region to be studied',
                  default=None,
                  )
argp.add_argument('-c',
                  dest='sample_infos',
                  metavar="PATIENTS_LIST",
                  help='list of patients to be studied',
                  default=None,
                  )
argp.add_argument('-p',
                  dest='project_code',
                  metavar="PROJECT_CODE",
                  help='UPPMAX project code',
                  default=None,
                  )
argp.add_argument('-a',
                  dest='anno_cols',
                  metavar="ANNOTATED_COLS",
                  help='Columns to be annotated in the result excel sheet (default all)',
                  default=None,
                  )
argp.add_argument('-A',
                  dest='annotated_vcf_tabix',
                  metavar="ANNOTATED_VCF_TABIX",
                  help='annoated vcf tabix file',
                  default=None,
                  )
argp.add_argument('-R',
                  dest='report_regions',
                  metavar="REPORT_REGIONS",
                  help='vcf regions to be shown up in the report (default all)',
                  default=None,
                  )
argp.add_argument('-C',
                  dest='call_info',
                  action="store_true",
                  help='indicate if other call information beside GT are required',
                  default=False,
                  )
argp.add_argument('-f',
                  dest='freq_ratios',
                  metavar="FREQ_RATIOS",
                  help='frequencies ratios to be of the mutations to be identified as rare',
                  default=None,
                  )
argp.add_argument('-o',
                  dest='out_jobs_setup_file',
                  metavar="JOBS_SETUP_FILE",
                  help='a file containing jobs configuration',
                  default=sys.stdout,
                  )
args = argp.parse_args()
app_pycmm_cmmdb_create_jobs_setup_file(dataset_name=args.dataset_name,
                                       project_out_dir=args.project_out_dir,
                                       vcf_tabix_file=args.vcf_tabix_file,
                                       vcf_region=args.vcf_region,
                                       sample_infos=args.sample_infos,
                                       project_code=args.project_code,
                                       anno_cols=args.anno_cols,
                                       annotated_vcf_tabix=args.annotated_vcf_tabix,
                                       report_regions=args.report_regions,
                                       call_info=args.call_info,
                                       frequency_ratios=args.freq_ratios,
                                       out_jobs_setup_file=args.out_jobs_setup_file,
                                       )

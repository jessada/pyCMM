import argparse
import sys
from argparse import RawTextHelpFormatter
from pycmm.settings import DNASEQ_CREATE_JOB_SETUP_FILE_DESCRIPTION
from pycmm.app.gatkbp import app_pycmm_gatkbp_create_jobs_setup_file
from collections import OrderedDict

argp = argparse.ArgumentParser(description=DNASEQ_CREATE_JOB_SETUP_FILE_DESCRIPTION,
                               formatter_class=RawTextHelpFormatter,
                               )
required_group = argp.add_argument_group('required arguments')
gatk_group = argp.add_argument_group('GATK-Best-Practice pipeline arguments')
required_group.add_argument('-d',
                            dest='dataset_name',
                            metavar="NAME",
                            help='name of this dataset. This will be the name of the merged vcf file',
                            required=True,
                            )
required_group.add_argument('-O',
                            dest='project_out_dir',
                            metavar="DIR",
                            help='a folder to keep all the running results, including log and intermediate files',
                            required=True,
                            )
argp.add_argument('-p',
                  dest='project_code',
                  metavar="PROJECT CODE",
                  help='UPPMAX project code',
                  default=None,
                  )
help = 'UPPMAX allocation time (default: {dflt_val})'.format(dflt_val=DFLT_JOB_ALLOC_TIME)
gatk_group.add_argument('--job_alloc_time',
                         dest='job_alloc_time',
                         metavar="ALLOC_TIME",
                         help=help,
                         default=DFLT_JOB_ALLOC_TIME,
                         )
gatk_group.add_argument('-R',
                        dest='reference_file',
                        metavar="FILE",
                        help='reference file',
                        required=True,
                        )
gatk_group.add_argument('-I',
                        dest='samples_root_dir',
                        metavar="DIR",
                        help='a folder where the fastq files of each sample are kept',
                        required=True,
                        )
gatk_group.add_argument('--known_indels',
                        dest='known_indels_file',
                        metavar="KNOWN INDELS",
                        help='known indels files',
                        nargs='*',
                        default=None,
                        )
gatk_group.add_argument('--dbsnp',
                        dest='dbsnp_file',
                        metavar="FILE",
                        help='dbsnp file',
                        default=None,
                        )
gatk_group.add_argument('--variants_calling',
                        dest='variants_calling',
                        action='store_const',
                        help="indicated if variants calling for this dataset need to be done",
                        const=True,
                        default=False,
                        )
gatk_group.add_argument('--targets_interval_list',
                        dest='targets_interval_list',
                        metavar="FILE",
                        help="a file with list of targets interval",
                        default=None,
                        )
gatk_group.add_argument('--split_regions_file',
                        dest='split_regions_file',
                        metavar="FILE",
                        help="a file with list of chromosome regions",
                        default=None,
                        )
gatk_group.add_argument('--preprocess_sample',
                        dest='preprocess_sample',
                        action='store_const',
                        help="indicated if sample preprocesing is needed",
                        const=True,
                        default=False,
                        )
argp.add_argument('-o',
                  dest='out_jobs_setup_file',
                  metavar="FILE",
                  help='a file containing jobs configuration',
                  default=sys.stdout,
                  )
args = argp.parse_args()
app_pycmm_gatkbp_create_jobs_setup_file(dataset_name=args.dataset_name,
                                        project_code=args.project_code,
                                        gatkbp_alloc_time=args.job_alloc_time,
                                        reference_file=args.reference_file,
                                        project_out_dir=args.project_out_dir,
                                        samples_root_dir=args.samples_root_dir,
                                        known_indels_file=args.known_indels_file,
                                        dbsnp_file=args.dbsnp_file,
                                        variants_calling=args.variants_calling,
                                        targets_interval_list=args.targets_interval_list,
                                        split_regions_file=args.split_regions_file,
                                        preprocess_sample=args.preprocess_sample,
                                        out_jobs_setup_file=args.out_jobs_setup_file,
                                        )
